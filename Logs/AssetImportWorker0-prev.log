Unity Editor version:    2021.2.8f1 (d0e5f0a7b06a)
Branch:                  2021.2/staging
Build type:              Release
Batch mode:              YES
macOS version:           Version 10.15.7 (Build 19H524)
Darwin version:          19.6.0
Architecture:            x86_64
Running under Rosetta:   NO
Available memory:        8192 MB
Using pre-set license
Pro License: NO

COMMAND LINE ARGUMENTS:
/Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/MacOS/Unity
-adb2
-batchMode
-noUpm
-name
AssetImportWorker0
-projectPath
/Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed
-logFile
Logs/AssetImportWorker0.log
-srvPort
52526
Successfully changed project path to: /Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed
/Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed
[UnityMemory] Configuration Parameters - Can be set up in boot.config
    "memorysetup-bucket-allocator-granularity=16"
    "memorysetup-bucket-allocator-bucket-count=8"
    "memorysetup-bucket-allocator-block-size=33554432"
    "memorysetup-bucket-allocator-block-count=8"
    "memorysetup-main-allocator-block-size=16777216"
    "memorysetup-thread-allocator-block-size=16777216"
    "memorysetup-gfx-main-allocator-block-size=16777216"
    "memorysetup-gfx-thread-allocator-block-size=16777216"
    "memorysetup-cache-allocator-block-size=4194304"
    "memorysetup-typetree-allocator-block-size=2097152"
    "memorysetup-profiler-bucket-allocator-granularity=16"
    "memorysetup-profiler-bucket-allocator-bucket-count=8"
    "memorysetup-profiler-bucket-allocator-block-size=33554432"
    "memorysetup-profiler-bucket-allocator-block-count=8"
    "memorysetup-profiler-allocator-block-size=16777216"
    "memorysetup-profiler-editor-allocator-block-size=1048576"
    "memorysetup-temp-allocator-size-main=16777216"
    "memorysetup-job-temp-allocator-block-size=2097152"
    "memorysetup-job-temp-allocator-block-size-background=1048576"
    "memorysetup-job-temp-allocator-reduction-small-platforms=262144"
    "memorysetup-temp-allocator-size-background-worker=32768"
    "memorysetup-temp-allocator-size-job-worker=262144"
    "memorysetup-temp-allocator-size-preload-manager=33554432"
    "memorysetup-temp-allocator-size-nav-mesh-worker=65536"
    "memorysetup-temp-allocator-size-audio-worker=65536"
    "memorysetup-temp-allocator-size-cloud-worker=32768"
    "memorysetup-temp-allocator-size-gi-baking-worker=262144"
    "memorysetup-temp-allocator-size-gfx=262144"
Refreshing native plugins compatible for Editor in 154.26 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Initialize engine version: 2021.2.8f1 (d0e5f0a7b06a)
[Subsystems] Discovering subsystems at path /Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed/Assets
GfxDevice: creating device client; threaded=0; jobified=0
Color LCD preferred device: Intel(R) Iris(TM) Plus Graphics 645 (low power)
Metal devices available: 1
0: Intel(R) Iris(TM) Plus Graphics 645 (low power)
Using device Intel(R) Iris(TM) Plus Graphics 645 (low power)
Initializing Metal device caps: Intel(R) Iris(TM) Plus Graphics 645
Initialize mono
Mono path[0] = '/Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/Managed'
Mono path[1] = '/Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/MonoBleedingEdge/lib/mono/unityjit-macos'
Mono config path = '/Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56148
Begin MonoManager ReloadAssembly
Registering precompiled unity dll's ...
Register platform support module: /Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/PlaybackEngines/MacStandaloneSupport/UnityEditor.OSXStandalone.Extensions.dll
Registered in 0.002468 seconds.
Native extension for OSXStandalone target not found
Refreshing native plugins compatible for Editor in 202.35 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  1.495 seconds
Domain Reload Profiling:
	ReloadAssembly (1496ms)
		BeginReloadAssembly (152ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (0ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (1ms)
		EndReloadAssembly (1213ms)
			LoadAssemblies (153ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (190ms)
			ReleaseScriptCaches (2ms)
			RebuildScriptCaches (72ms)
			SetupLoadedEditorAssemblies (843ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (29ms)
				SetLoadedEditorAssemblies (1ms)
				RefreshPlugins (202ms)
				BeforeProcessingInitializeOnLoad (2ms)
				ProcessInitializeOnLoadAttributes (533ms)
				ProcessInitializeOnLoadMethodAttributes (76ms)
				AfterProcessingInitializeOnLoad (0ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (0ms)
Platform modules already initialized, skipping
Registering precompiled user dll's ...
Registered in 0.016142 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory doesn't match image /Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed/Library/PackageCache/com.unity.visualscripting@1.7.6/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed/Library/PackageCache/com.unity.visualscripting@1.7.6/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
Native extension for OSXStandalone target not found
Refreshing native plugins compatible for Editor in 195.61 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  3.478 seconds
Domain Reload Profiling:
	ReloadAssembly (3479ms)
		BeginReloadAssembly (182ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (10ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (52ms)
		EndReloadAssembly (3090ms)
			LoadAssemblies (200ms)
			RebuildTransferFunctionScriptingTraits (1ms)
			SetupTypeCache (677ms)
			ReleaseScriptCaches (1ms)
			RebuildScriptCaches (161ms)
			SetupLoadedEditorAssemblies (1959ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (12ms)
				SetLoadedEditorAssemblies (0ms)
				RefreshPlugins (196ms)
				BeforeProcessingInitializeOnLoad (178ms)
				ProcessInitializeOnLoadAttributes (1141ms)
				ProcessInitializeOnLoadMethodAttributes (429ms)
				AfterProcessingInitializeOnLoad (3ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (7ms)
Platform modules already initialized, skipping
========================================================================
Worker process is ready to serve import requests
Launching external process: /Applications/Unity/Hub/Editor/2021.2.8f1/Unity.app/Contents/Tools/UnityShaderCompiler
Launched and connected shader compiler UnityShaderCompiler after 0.04 seconds
Compilation succeeded with: 

program_source:696:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:702:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:703:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int3 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    bool2 u_xlatb1;
    float4 u_xlat2;
    int3 u_xlati2;
    bool2 u_xlatb2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    int3 u_xlati7;
    float3 u_xlat8;
    int3 u_xlati8;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    bool u_xlatb19;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat27;
    float u_xlat28;
    float u_xlat31;
    bool u_xlatb31;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat10 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat19 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat1.x = max(u_xlat10, u_xlat1.x);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat1.y = max(u_xlat28, u_xlat10);
        u_xlatb1.xy = (u_xlat1.xy<float2(0.0, 0.0));
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlatb10 = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat5.x = (u_xlatb19) ? u_xlat4.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat5.y = (u_xlatb19) ? u_xlat4.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat5.z = (u_xlatb19) ? u_xlat4.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = rsqrt(u_xlat19);
        u_xlat4.xyz = float3(u_xlat19) * u_xlat5.xyz;
        u_xlat5.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat6.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat7.xyz = u_xlat5.xyz * u_xlat6.xyz;
        u_xlat5.xyz = fma(u_xlat5.zxy, u_xlat6.yzx, (-u_xlat7.xyz));
        u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
        u_xlat19 = u_xlat19 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = u_xlat28 * u_xlat4.x;
        u_xlat28 = sqrt(u_xlat28);
        u_xlat28 = u_xlat28 * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = u_xlat19<u_xlat28;
        u_xlatb10 = u_xlatb19 && u_xlatb10;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        if(!u_xlatb1.x){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat4.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat5 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat4.y = u_xlat5.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat6 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat4.z = u_xlat6.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati7.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
            u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
            u_xlati0.xyz = int3(uint3(u_xlati2.xyz) | uint3(u_xlati7.xyz));
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb2.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat3.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat3.xyz);
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat3.xyz);
            u_xlat3.xyz = u_xlat3.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat3.z);
            u_xlat3.w = (-u_xlat3.y);
            u_xlat20.xy = float2(u_xlat27) * u_xlat3.xw;
            u_xlat20.xy = fma(u_xlat20.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat3.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat3.xyz);
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat3.xyz);
            u_xlat3.xyz = u_xlat3.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat3.z);
            u_xlat3.w = (-u_xlat3.y);
            u_xlat3.xy = float2(u_xlat27) * u_xlat3.xw;
            u_xlat3.xy = fma(u_xlat3.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat21.xy = u_xlat3.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat3.xy = fma(u_xlat3.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat3.xy = fma(u_xlat20.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat20.xy = fma(u_xlat20.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat21.xy));
            u_xlat1.x = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat3.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat2.xzw = u_xlat5.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat6.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat2.xzw, u_xlat2.xzw);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:689:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:695:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:696:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD4 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.w = u_xlat0.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.w = u_xlat0.y;
    output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlatb0 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    if(u_xlatb0){
        output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlatb0 = 0.0<UnityPerDraw.unity_MotionVectorsParams.x;
        u_xlat0.xyz = (bool(u_xlatb0)) ? input.TEXCOORD4.xyz : input.POSITION0.xyz;
        u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[3].xyz;
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].x;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].x;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].x;
        u_xlat2.w = u_xlat1.x;
        u_xlat0.w = 1.0;
        output.TEXCOORD8.x = dot(u_xlat2, u_xlat0);
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].y;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].y;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].y;
        u_xlat2.w = u_xlat1.y;
        output.TEXCOORD8.y = dot(u_xlat2, u_xlat0);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].z;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].z;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].z;
        output.TEXCOORD8.z = dot(u_xlat1, u_xlat0);
    }
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD8 [[ attribute(4) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float3 TEXCOORD9 [[ user(TEXCOORD9) ]];
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float3 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb9;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[1].xyw;
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD8.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[3].xyw;
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].TEXCOORD8.xyz;
    u_xlat1.xyz = fma(input.cp[0].TEXCOORD8.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].TEXCOORD8.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat1.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[1].xyw;
    u_xlat1.xyw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[2].xyw, u_xlat1.zzz, u_xlat1.xyw);
    u_xlat1.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[3].xyw;
    u_xlatb9 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    output.TEXCOORD9.xyz = (bool(u_xlatb9)) ? float3(0.0, 0.0, 1.0) : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:658:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:665:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:666:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool2 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb4.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
        if(u_xlatb4.x){
            u_xlat4.xzw = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xzw);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xzw);
            u_xlat4.xzw = u_xlat4.xzw + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xzw + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xzw + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat4.xzw + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat4.xz = u_xlat0.xx * u_xlat7.xw;
            u_xlat4.xz = fma(u_xlat4.xz, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xz = u_xlat4.xz * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlat0.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat0.xyz = sqrt(u_xlat0.xyz);
        u_xlat24 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat0.x = u_xlat0.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.x = (-u_xlat0.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.y = (-u_xlat0.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.z = (-u_xlat0.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat0.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (u_xlatb4.y) ? u_xlat0.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:658:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:665:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:666:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool2 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb4.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
        if(u_xlatb4.x){
            u_xlat4.xzw = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xzw);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xzw);
            u_xlat4.xzw = u_xlat4.xzw + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xzw + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xzw + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat4.xzw + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat4.xz = u_xlat0.xx * u_xlat7.xw;
            u_xlat4.xz = fma(u_xlat4.xz, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xz = u_xlat4.xz * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlat0.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat0.xyz = sqrt(u_xlat0.xyz);
        u_xlat24 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat0.x = u_xlat0.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.x = (-u_xlat0.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.y = (-u_xlat0.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.z = (-u_xlat0.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat0.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (u_xlatb4.y) ? u_xlat0.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:702:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:708:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:709:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:666:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:672:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:673:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb4;
    bool u_xlatb8;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlatb4 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb8 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb4 = u_xlatb8 && u_xlatb4;
    output.INTERNALTESSPOS0.x = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat3.w = u_xlat1.y;
    u_xlat3.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat0.x = dot(u_xlat3, u_xlat2);
    output.INTERNALTESSPOS0.y = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat1, u_xlat2);
    output.INTERNALTESSPOS0.z = (u_xlatb4) ? 0.0 : u_xlat0.x;
    output.INTERNALTESSPOS0.w = (u_xlatb4) ? 0.0 : UnityPerMaterial._TessellationFactor;
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
    output.NORMAL0.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat0.xzw;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:702:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:708:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:709:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:649:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:655:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:656:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(1) ]] ;
    float3 NORMAL0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:691:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:697:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:698:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TANGENT0.w = input.TANGENT0.w;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.zw = input.TEXCOORD1.xy;
    output.TEXCOORD2 = input.COLOR0;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // control_point_phase2
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        u_xlati0.x = controlPointID;
        output.INTERNALTESSPOS0 = input.cp[u_xlati0.x].INTERNALTESSPOS0;
        output.NORMAL0.xyz = input.cp[u_xlati0.x].NORMAL0.xyz;
        output.TANGENT0 = input.cp[u_xlati0.x].TANGENT0;
        output.TEXCOORD0 = input.cp[u_xlati0.x].TEXCOORD0;
        output.TEXCOORD2 = input.cp[u_xlati0.x].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    // fork_phase3
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:593:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:599:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:600:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int3 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    bool2 u_xlatb1;
    float4 u_xlat2;
    int3 u_xlati2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    int3 u_xlati7;
    int3 u_xlati8;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    bool u_xlatb19;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat31;
    bool u_xlatb31;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat10 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat19 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat1.x = max(u_xlat10, u_xlat1.x);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat1.y = max(u_xlat28, u_xlat10);
        u_xlatb1.xy = (u_xlat1.xy<float2(0.0, 0.0));
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlatb10 = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat5.x = (u_xlatb19) ? u_xlat4.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat5.y = (u_xlatb19) ? u_xlat4.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat5.z = (u_xlatb19) ? u_xlat4.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = rsqrt(u_xlat19);
        u_xlat4.xyz = float3(u_xlat19) * u_xlat5.xyz;
        u_xlat5.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat6.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat7.xyz = u_xlat5.xyz * u_xlat6.xyz;
        u_xlat5.xyz = fma(u_xlat5.zxy, u_xlat6.yzx, (-u_xlat7.xyz));
        u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
        u_xlat19 = u_xlat19 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = u_xlat28 * u_xlat4.x;
        u_xlat28 = sqrt(u_xlat28);
        u_xlat28 = u_xlat28 * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = u_xlat19<u_xlat28;
        u_xlatb10 = u_xlatb19 && u_xlatb10;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        if(!u_xlatb1.x){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat4.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat5 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat4.y = u_xlat5.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat6 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat4.z = u_xlat6.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati7.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
            u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
            u_xlati0.xyz = int3(uint3(u_xlati2.xyz) | uint3(u_xlati7.xyz));
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb27 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat2.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
            u_xlat2.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
            u_xlat2.xyz = u_xlat2.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat2.z);
            u_xlat2.w = (-u_xlat2.y);
            u_xlat2.xy = u_xlat1.xx * u_xlat2.xw;
            u_xlat2.xy = fma(u_xlat2.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat3.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat3.xyz);
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat3.xyz);
            u_xlat3.xyz = u_xlat3.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat3.z);
            u_xlat3.w = (-u_xlat3.y);
            u_xlat20.xy = u_xlat1.xx * u_xlat3.xw;
            u_xlat20.xy = fma(u_xlat20.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat3.xy = u_xlat20.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat21.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat20.xy = fma(u_xlat20.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat21.xy));
            u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat7.x = u_xlat1.x * u_xlat20.x;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat20.xy = fma(u_xlat2.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat21.xy));
            u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat2.z = sqrt(u_xlat20.x);
            u_xlat2.xy = fma(u_xlat2.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat3.xy));
            u_xlat2.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat7.yz = u_xlat1.xx * u_xlat2.zx;
            u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
            u_xlat2.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat2.xyz : u_xlat0.xyz;
            u_xlatb27 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat2.xyz = u_xlat5.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat6.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat1.z = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat28 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat28;
            u_xlat2.x = (-u_xlat1.x) + 1.0;
            u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat28;
            u_xlat2.y = (-u_xlat1.x) + 1.0;
            u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat28;
            u_xlat2.z = (-u_xlat1.x) + 1.0;
            u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat2.xyz * u_xlat2.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:589:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:595:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:596:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD4 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.w = u_xlat0.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.w = u_xlat0.y;
    output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlatb0 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    if(u_xlatb0){
        output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlatb0 = 0.0<UnityPerDraw.unity_MotionVectorsParams.x;
        u_xlat0.xyz = (bool(u_xlatb0)) ? input.TEXCOORD4.xyz : input.POSITION0.xyz;
        u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[3].xyz;
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].x;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].x;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].x;
        u_xlat2.w = u_xlat1.x;
        u_xlat0.w = 1.0;
        output.TEXCOORD8.x = dot(u_xlat2, u_xlat0);
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].y;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].y;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].y;
        u_xlat2.w = u_xlat1.y;
        output.TEXCOORD8.y = dot(u_xlat2, u_xlat0);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].z;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].z;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].z;
        output.TEXCOORD8.z = dot(u_xlat1, u_xlat0);
    }
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD8 [[ attribute(4) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float3 TEXCOORD9 [[ user(TEXCOORD9) ]];
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float3 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb9;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[1].xyw;
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD8.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[3].xyw;
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].TEXCOORD8.xyz;
    u_xlat1.xyz = fma(input.cp[0].TEXCOORD8.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].TEXCOORD8.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat1.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[1].xyw;
    u_xlat1.xyw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[2].xyw, u_xlat1.zzz, u_xlat1.xyw);
    u_xlat1.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[3].xyw;
    u_xlatb9 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    output.TEXCOORD9.xyz = (bool(u_xlatb9)) ? float3(0.0, 0.0, 1.0) : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:561:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:568:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:569:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    bool u_xlatb0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
        if(u_xlatb0){
            u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xyz);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xyz);
            u_xlat4.xyz = u_xlat4.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xyz + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat4.xyz = u_xlat4.xyz + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat4.z);
            u_xlat4.w = (-u_xlat4.y);
            u_xlat4.xy = u_xlat0.xx * u_xlat4.xw;
            u_xlat4.xy = fma(u_xlat4.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xy = u_xlat4.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat20.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat8.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat8.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat8.xyz = sqrt(u_xlat8.xyz);
        u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.x = u_xlat8.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.x = (-u_xlat8.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.y = (-u_xlat8.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.z = (-u_xlat8.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat8.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat8.xyz = u_xlat8.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat8.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:561:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:568:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:569:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    bool u_xlatb0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
        if(u_xlatb0){
            u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xyz);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xyz);
            u_xlat4.xyz = u_xlat4.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xyz + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat4.xyz = u_xlat4.xyz + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat4.z);
            u_xlat4.w = (-u_xlat4.y);
            u_xlat4.xy = u_xlat0.xx * u_xlat4.xw;
            u_xlat4.xy = fma(u_xlat4.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xy = u_xlat4.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat20.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat8.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat8.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat8.xyz = sqrt(u_xlat8.xyz);
        u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.x = u_xlat8.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.x = (-u_xlat8.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.y = (-u_xlat8.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.z = (-u_xlat8.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat8.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat8.xyz = u_xlat8.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat8.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:602:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:608:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:609:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:566:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:572:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:573:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb4;
    bool u_xlatb8;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlatb4 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb8 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb4 = u_xlatb8 && u_xlatb4;
    output.INTERNALTESSPOS0.x = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat3.w = u_xlat1.y;
    u_xlat3.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat0.x = dot(u_xlat3, u_xlat2);
    output.INTERNALTESSPOS0.y = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat1, u_xlat2);
    output.INTERNALTESSPOS0.z = (u_xlatb4) ? 0.0 : u_xlat0.x;
    output.INTERNALTESSPOS0.w = (u_xlatb4) ? 0.0 : UnityPerMaterial._TessellationFactor;
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
    output.NORMAL0.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat0.xzw;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:589:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:595:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:596:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TANGENT0.w = input.TANGENT0.w;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.zw = input.TEXCOORD1.xy;
    output.TEXCOORD2 = input.COLOR0;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:602:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:608:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:609:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:602:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:608:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:609:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:557:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:563:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:564:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:549:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:555:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:556:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(1) ]] ;
    float3 NORMAL0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:591:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:597:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:598:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TANGENT0.w = input.TANGENT0.w;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.zw = input.TEXCOORD1.xy;
    output.TEXCOORD2 = input.COLOR0;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // control_point_phase2
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        u_xlati0.x = controlPointID;
        output.INTERNALTESSPOS0 = input.cp[u_xlati0.x].INTERNALTESSPOS0;
        output.NORMAL0.xyz = input.cp[u_xlati0.x].NORMAL0.xyz;
        output.TANGENT0 = input.cp[u_xlati0.x].TANGENT0;
        output.TEXCOORD0 = input.cp[u_xlati0.x].TEXCOORD0;
        output.TEXCOORD2 = input.cp[u_xlati0.x].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    // fork_phase3
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Refreshing native plugins compatible for Editor in 1.65 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 5967 Unused Serialized files (Serialized files now loaded: 0)
Unloading 53 unused Assets / (1.6 MB). Loaded Objects now: 6414.
Memory consumption went from 407.7 MB to 406.1 MB.
Total: 11.506302 ms (FindLiveObjects: 0.755494 ms CreateObjectMapping: 0.748367 ms MarkObjects: 7.450483 ms  DeleteObjects: 2.550423 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:framework-osx-AVFoundation: b23960f63f64bdc6ff669e2cdcee2391 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
========================================================================
Received Import Request.
  Time since last request: 13812.499331 seconds.
  path: Assets/Scenes/Testing/renderTextures.unity
  artifactKey: Guid(40d540e90e5f64af6a6a7dc46129d821) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Scenes/Testing/renderTextures.unity using Guid(40d540e90e5f64af6a6a7dc46129d821) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: '1bb695cfecc708632685422d9f71f1d7') in 0.036738 seconds 
========================================================================
Received Import Request.
  Time since last request: 11.684871 seconds.
  path: Assets/Scenes/Main.unity
  artifactKey: Guid(36f2711a6c97a46feb8c5d1bbf8237c2) Importer(815301076,1909f56bfc062723c751e8b465ee728b)
Start importing Assets/Scenes/Main.unity using Guid(36f2711a6c97a46feb8c5d1bbf8237c2) Importer(815301076,1909f56bfc062723c751e8b465ee728b)  -> (artifact id: 'ae35e99ac882c9ea83f9201a84dbbd2c') in 0.002469 seconds 
========================================================================
Received Prepare
Registering precompiled user dll's ...
Registered in 0.004931 seconds.
Begin MonoManager ReloadAssembly
Symbol file LoadedFromMemory doesn't match image /Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed/Library/PackageCache/com.unity.visualscripting@1.7.6/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/laraketzenberg/Documents/05_Semester/01_Talk_to_me/GitHubReps/seed/Library/PackageCache/com.unity.visualscripting@1.7.6/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
Native extension for OSXStandalone target not found
Refreshing native plugins compatible for Editor in 2.65 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Mono: successfully reloaded assembly
- Completed reload, in  3.896 seconds
Domain Reload Profiling:
	ReloadAssembly (3898ms)
		BeginReloadAssembly (379ms)
			ExecutionOrderSort (0ms)
			DisableScriptedObjects (11ms)
			BackupInstance (0ms)
			ReleaseScriptingObjects (0ms)
			CreateAndSetChildDomain (144ms)
		EndReloadAssembly (3240ms)
			LoadAssemblies (240ms)
			RebuildTransferFunctionScriptingTraits (0ms)
			SetupTypeCache (1002ms)
			ReleaseScriptCaches (7ms)
			RebuildScriptCaches (226ms)
			SetupLoadedEditorAssemblies (1509ms)
				LogAssemblyErrors (0ms)
				InitializePlatformSupportModulesInManaged (21ms)
				SetLoadedEditorAssemblies (2ms)
				RefreshPlugins (3ms)
				BeforeProcessingInitializeOnLoad (197ms)
				ProcessInitializeOnLoadAttributes (1144ms)
				ProcessInitializeOnLoadMethodAttributes (134ms)
				AfterProcessingInitializeOnLoad (8ms)
				EditorAssembliesLoaded (0ms)
			ExecutionOrderSort2 (0ms)
			AwakeInstancesAfterBackupRestoration (43ms)
Platform modules already initialized, skipping
Compilation succeeded with: 

program_source:696:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:702:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:703:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int3 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    bool2 u_xlatb1;
    float4 u_xlat2;
    int3 u_xlati2;
    bool2 u_xlatb2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    int3 u_xlati7;
    float3 u_xlat8;
    int3 u_xlati8;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    bool u_xlatb19;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat27;
    float u_xlat28;
    float u_xlat31;
    bool u_xlatb31;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat10 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat19 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat1.x = max(u_xlat10, u_xlat1.x);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat1.y = max(u_xlat28, u_xlat10);
        u_xlatb1.xy = (u_xlat1.xy<float2(0.0, 0.0));
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlatb10 = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat5.x = (u_xlatb19) ? u_xlat4.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat5.y = (u_xlatb19) ? u_xlat4.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat5.z = (u_xlatb19) ? u_xlat4.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = rsqrt(u_xlat19);
        u_xlat4.xyz = float3(u_xlat19) * u_xlat5.xyz;
        u_xlat5.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat6.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat7.xyz = u_xlat5.xyz * u_xlat6.xyz;
        u_xlat5.xyz = fma(u_xlat5.zxy, u_xlat6.yzx, (-u_xlat7.xyz));
        u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
        u_xlat19 = u_xlat19 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = u_xlat28 * u_xlat4.x;
        u_xlat28 = sqrt(u_xlat28);
        u_xlat28 = u_xlat28 * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = u_xlat19<u_xlat28;
        u_xlatb10 = u_xlatb19 && u_xlatb10;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        if(!u_xlatb1.x){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat4.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat5 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat4.y = u_xlat5.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat6 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat4.z = u_xlat6.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati7.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
            u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
            u_xlati0.xyz = int3(uint3(u_xlati2.xyz) | uint3(u_xlati7.xyz));
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb2.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat3.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat3.xyz);
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat3.xyz);
            u_xlat3.xyz = u_xlat3.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat3.z);
            u_xlat3.w = (-u_xlat3.y);
            u_xlat20.xy = float2(u_xlat27) * u_xlat3.xw;
            u_xlat20.xy = fma(u_xlat20.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat3.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat3.xyz);
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat3.xyz);
            u_xlat3.xyz = u_xlat3.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat3.z);
            u_xlat3.w = (-u_xlat3.y);
            u_xlat3.xy = float2(u_xlat27) * u_xlat3.xw;
            u_xlat3.xy = fma(u_xlat3.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat21.xy = u_xlat3.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat3.xy = fma(u_xlat3.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat3.xy = fma(u_xlat20.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat3.xy, u_xlat3.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat20.xy = fma(u_xlat20.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat21.xy));
            u_xlat1.x = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat3.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat2.xzw = u_xlat5.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat6.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat2.xzw, u_xlat2.xzw);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb2.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:689:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:695:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:696:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD4 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.w = u_xlat0.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.w = u_xlat0.y;
    output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlatb0 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    if(u_xlatb0){
        output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlatb0 = 0.0<UnityPerDraw.unity_MotionVectorsParams.x;
        u_xlat0.xyz = (bool(u_xlatb0)) ? input.TEXCOORD4.xyz : input.POSITION0.xyz;
        u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[3].xyz;
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].x;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].x;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].x;
        u_xlat2.w = u_xlat1.x;
        u_xlat0.w = 1.0;
        output.TEXCOORD8.x = dot(u_xlat2, u_xlat0);
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].y;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].y;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].y;
        u_xlat2.w = u_xlat1.y;
        output.TEXCOORD8.y = dot(u_xlat2, u_xlat0);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].z;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].z;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].z;
        output.TEXCOORD8.z = dot(u_xlat1, u_xlat0);
    }
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD8 [[ attribute(4) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float3 TEXCOORD9 [[ user(TEXCOORD9) ]];
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float3 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb9;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[1].xyw;
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD8.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[3].xyw;
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].TEXCOORD8.xyz;
    u_xlat1.xyz = fma(input.cp[0].TEXCOORD8.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].TEXCOORD8.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat1.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[1].xyw;
    u_xlat1.xyw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[2].xyw, u_xlat1.zzz, u_xlat1.xyw);
    u_xlat1.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[3].xyw;
    u_xlatb9 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    output.TEXCOORD9.xyz = (bool(u_xlatb9)) ? float3(0.0, 0.0, 1.0) : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:658:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:665:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:666:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool2 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb4.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
        if(u_xlatb4.x){
            u_xlat4.xzw = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xzw);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xzw);
            u_xlat4.xzw = u_xlat4.xzw + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xzw + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xzw + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat4.xzw + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat4.xz = u_xlat0.xx * u_xlat7.xw;
            u_xlat4.xz = fma(u_xlat4.xz, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xz = u_xlat4.xz * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlat0.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat0.xyz = sqrt(u_xlat0.xyz);
        u_xlat24 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat0.x = u_xlat0.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.x = (-u_xlat0.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.y = (-u_xlat0.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.z = (-u_xlat0.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat0.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (u_xlatb4.y) ? u_xlat0.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:658:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:665:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:666:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    bool2 u_xlatb4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb4.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
        if(u_xlatb4.x){
            u_xlat4.xzw = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xzw);
            u_xlat4.xzw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xzw);
            u_xlat4.xzw = u_xlat4.xzw + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xzw + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xzw + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat4.xzw + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat4.xz = u_xlat0.xx * u_xlat7.xw;
            u_xlat4.xz = fma(u_xlat4.xz, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xz = u_xlat4.xz * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xz));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xz = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xz, u_xlat4.xz);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlat0.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat0.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat0.xyz = sqrt(u_xlat0.xyz);
        u_xlat24 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat0.x = u_xlat0.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.x = (-u_xlat0.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.y = (-u_xlat0.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat0.x = u_xlat0.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat0.x = u_xlat0.x / u_xlat24;
        u_xlat2.z = (-u_xlat0.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat0.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (u_xlatb4.y) ? u_xlat0.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:702:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:708:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:709:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:666:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:672:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:673:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb4;
    bool u_xlatb8;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlatb4 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb8 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb4 = u_xlatb8 && u_xlatb4;
    output.INTERNALTESSPOS0.x = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat3.w = u_xlat1.y;
    u_xlat3.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat0.x = dot(u_xlat3, u_xlat2);
    output.INTERNALTESSPOS0.y = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat1, u_xlat2);
    output.INTERNALTESSPOS0.z = (u_xlatb4) ? 0.0 : u_xlat0.x;
    output.INTERNALTESSPOS0.w = (u_xlatb4) ? 0.0 : UnityPerMaterial._TessellationFactor;
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
    output.NORMAL0.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat0.xzw;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:702:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:708:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:709:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:649:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:655:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:656:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(1) ]] ;
    float3 NORMAL0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:691:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:697:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:698:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor0;
    float4 _BaseColor1;
    float4 _BaseColor2;
    float4 _BaseColor3;
    float4 _BaseColorMap0_ST;
    float4 _BaseColorMap1_ST;
    float4 _BaseColorMap2_ST;
    float4 _BaseColorMap3_ST;
    float4 _BaseColorMap0_TexelSize;
    float4 _BaseColorMap0_MipInfo;
    float _Metallic0;
    float _Metallic1;
    float _Metallic2;
    float _Metallic3;
    float _MetallicRemapMin0;
    float _MetallicRemapMin1;
    float _MetallicRemapMin2;
    float _MetallicRemapMin3;
    float _MetallicRemapMax0;
    float _MetallicRemapMax1;
    float _MetallicRemapMax2;
    float _MetallicRemapMax3;
    float _Smoothness0;
    float _Smoothness1;
    float _Smoothness2;
    float _Smoothness3;
    float _SmoothnessRemapMin0;
    float _SmoothnessRemapMin1;
    float _SmoothnessRemapMin2;
    float _SmoothnessRemapMin3;
    float _SmoothnessRemapMax0;
    float _SmoothnessRemapMax1;
    float _SmoothnessRemapMax2;
    float _SmoothnessRemapMax3;
    float _AORemapMin0;
    float _AORemapMin1;
    float _AORemapMin2;
    float _AORemapMin3;
    float _AORemapMax0;
    float _AORemapMax1;
    float _AORemapMax2;
    float _AORemapMax3;
    float _NormalScale0;
    float _NormalScale1;
    float _NormalScale2;
    float _NormalScale3;
    float4 _NormalMap0_TexelSize;
    float4 _HeightMap0_TexelSize;
    float4 _HeightMap1_TexelSize;
    float4 _HeightMap2_TexelSize;
    float4 _HeightMap3_TexelSize;
    float4 _DetailMap0_ST;
    float4 _DetailMap1_ST;
    float4 _DetailMap2_ST;
    float4 _DetailMap3_ST;
    float _UVDetail0;
    float _UVDetail1;
    float _UVDetail2;
    float _UVDetail3;
    float _DetailAlbedoScale0;
    float _DetailAlbedoScale1;
    float _DetailAlbedoScale2;
    float _DetailAlbedoScale3;
    float _DetailNormalScale0;
    float _DetailNormalScale1;
    float _DetailNormalScale2;
    float _DetailNormalScale3;
    float _DetailSmoothnessScale0;
    float _DetailSmoothnessScale1;
    float _DetailSmoothnessScale2;
    float _DetailSmoothnessScale3;
    float _HeightAmplitude0;
    float _HeightAmplitude1;
    float _HeightAmplitude2;
    float _HeightAmplitude3;
    float _HeightCenter0;
    float _HeightCenter1;
    float _HeightCenter2;
    float _HeightCenter3;
    float _DiffusionProfileHash0;
    float _DiffusionProfileHash1;
    float _DiffusionProfileHash2;
    float _DiffusionProfileHash3;
    float _SubsurfaceMask0;
    float _SubsurfaceMask1;
    float _SubsurfaceMask2;
    float _SubsurfaceMask3;
    float _Thickness0;
    float _Thickness1;
    float _Thickness2;
    float _Thickness3;
    float4 _ThicknessRemap0;
    float4 _ThicknessRemap1;
    float4 _ThicknessRemap2;
    float4 _ThicknessRemap3;
    float _OpacityAsDensity0;
    float _OpacityAsDensity1;
    float _OpacityAsDensity2;
    float _OpacityAsDensity3;
    float _InheritBaseNormal1;
    float _InheritBaseNormal2;
    float _InheritBaseNormal3;
    float _InheritBaseHeight1;
    float _InheritBaseHeight2;
    float _InheritBaseHeight3;
    float _InheritBaseColor1;
    float _InheritBaseColor2;
    float _InheritBaseColor3;
    float _HeightOffset0;
    float _HeightOffset1;
    float _HeightOffset2;
    float _HeightOffset3;
    float _HeightTransition;
    float4 _LayerMaskMap_ST;
    float _TexWorldScaleBlendMask;
    float _TexWorldScale0;
    float _TexWorldScale1;
    float _TexWorldScale2;
    float _TexWorldScale3;
    float _InvTilingScale0;
    float _InvTilingScale1;
    float _InvTilingScale2;
    float _InvTilingScale3;
    float4 _UVMappingMaskBlendMask;
    float4 _UVMappingMask0;
    float4 _UVMappingMask1;
    float4 _UVMappingMask2;
    float4 _UVMappingMask3;
    float4 _UVDetailsMappingMask0;
    float4 _UVDetailsMappingMask1;
    float4 _UVDetailsMappingMask2;
    float4 _UVDetailsMappingMask3;
    float _LinkDetailsWithBase0;
    float _LinkDetailsWithBase1;
    float _LinkDetailsWithBase2;
    float _LinkDetailsWithBase3;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TANGENT0.w = input.TANGENT0.w;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.zw = input.TEXCOORD1.xy;
    output.TEXCOORD2 = input.COLOR0;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    int4 u_xlati5;
    bool2 u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float3 u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    float2 u_xlat23;
    float2 u_xlat24;
    float u_xlat27;
    int u_xlati27;
    float u_xlat29;
    // control_point_phase2
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        u_xlati0.x = controlPointID;
        output.INTERNALTESSPOS0 = input.cp[u_xlati0.x].INTERNALTESSPOS0;
        output.NORMAL0.xyz = input.cp[u_xlati0.x].NORMAL0.xyz;
        output.TANGENT0 = input.cp[u_xlati0.x].TANGENT0;
        output.TEXCOORD0 = input.cp[u_xlati0.x].TEXCOORD0;
        output.TEXCOORD2 = input.cp[u_xlati0.x].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    // fork_phase3
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb10) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb10) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb10) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat10.x = rsqrt(u_xlat10.x);
        u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat29 = dot(u_xlat2.xyz, u_xlat10.xyz);
        u_xlat29 = u_xlat29 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
        u_xlat10.x = u_xlat10.x * u_xlat2.x;
        u_xlat10.x = sqrt(u_xlat10.x);
        u_xlat10.x = u_xlat10.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb10 = u_xlat29<u_xlat10.x;
        u_xlatb1.x = u_xlatb10 && u_xlatb1.x;
        u_xlati27 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati27))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb5.xy = (float2(0.0, 0.0)<float2(UnityPerMaterial._TessellationFactorTriangleSize, UnityPerMaterial._TessellationFactorMaxDistance));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat23.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat23.xy = fma(u_xlat23.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat6.xy = float2(u_xlat27) * u_xlat6.xw;
            u_xlat6.xy = fma(u_xlat6.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat24.xy = u_xlat6.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat27 = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat7.xy = float2(u_xlat27) * u_xlat7.xw;
            u_xlat7.xy = fma(u_xlat7.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat7.xy = u_xlat7.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat27 = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat6.xy = fma(u_xlat6.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.x = u_xlat27 * u_xlat1.x;
            u_xlat8.x = clamp(u_xlat8.x, 0.0f, 1.0f);
            u_xlat6.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat7.xy));
            u_xlat1.x = dot(u_xlat6.xy, u_xlat6.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.y = u_xlat27 * u_xlat1.x;
            u_xlat8.y = clamp(u_xlat8.y, 0.0f, 1.0f);
            u_xlat23.xy = fma(u_xlat23.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat24.xy));
            u_xlat1.x = dot(u_xlat23.xy, u_xlat23.xy);
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat8.z = u_xlat27 * u_xlat1.x;
            u_xlat8.z = clamp(u_xlat8.z, 0.0f, 1.0f);
            u_xlat6.xyz = u_xlat0.xyz * u_xlat8.xyz;
            u_xlat0.xyz = (u_xlatb5.x) ? u_xlat6.xyz : u_xlat0.xyz;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat27 = sqrt(u_xlat27);
            u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.y = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xy = sqrt(u_xlat1.xy);
            u_xlat19 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat27 = u_xlat27 + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.x = (-u_xlat27) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.y = (-u_xlat27) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat27 = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat27 = u_xlat27 / u_xlat19;
            u_xlat3.z = (-u_xlat27) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (u_xlatb5.y) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:593:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:599:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:600:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int3 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    bool2 u_xlatb1;
    float4 u_xlat2;
    int3 u_xlati2;
    float4 u_xlat3;
    float3 u_xlat4;
    float4 u_xlat5;
    bool u_xlatb5;
    float4 u_xlat6;
    float4 u_xlat7;
    int3 u_xlati7;
    int3 u_xlati8;
    float u_xlat10;
    bool u_xlatb10;
    float u_xlat19;
    bool u_xlatb19;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat27;
    bool u_xlatb27;
    float u_xlat28;
    float u_xlat31;
    bool u_xlatb31;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat10 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat19 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[0]);
        u_xlat1.x = max(u_xlat10, u_xlat1.x);
        u_xlat1.x = max(u_xlat19, u_xlat1.x);
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[1]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat1.y = max(u_xlat28, u_xlat10);
        u_xlatb1.xy = (u_xlat1.xy<float2(0.0, 0.0));
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[2]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlat10 = dot(u_xlat0, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat19 = dot(u_xlat2, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat28 = dot(u_xlat3, ShaderVariablesGlobal._ShadowFrustumPlanes[3]);
        u_xlat10 = max(u_xlat19, u_xlat10);
        u_xlat10 = max(u_xlat28, u_xlat10);
        u_xlatb10 = u_xlat10<0.0;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        u_xlatb10 = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat5.x = (u_xlatb19) ? u_xlat4.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat5.y = (u_xlatb19) ? u_xlat4.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat5.z = (u_xlatb19) ? u_xlat4.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat19 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat19 = rsqrt(u_xlat19);
        u_xlat4.xyz = float3(u_xlat19) * u_xlat5.xyz;
        u_xlat5.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat6.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat7.xyz = u_xlat5.xyz * u_xlat6.xyz;
        u_xlat5.xyz = fma(u_xlat5.zxy, u_xlat6.yzx, (-u_xlat7.xyz));
        u_xlat19 = dot(u_xlat5.xyz, u_xlat4.xyz);
        u_xlat19 = u_xlat19 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = u_xlat28 * u_xlat4.x;
        u_xlat28 = sqrt(u_xlat28);
        u_xlat28 = u_xlat28 * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb19 = u_xlat19<u_xlat28;
        u_xlatb10 = u_xlatb19 && u_xlatb10;
        u_xlatb1.x = u_xlatb10 || u_xlatb1.x;
        if(!u_xlatb1.x){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat4.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat5 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat4.y = u_xlat5.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat6 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat4.z = u_xlat6.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati7.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati7.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb1.x = u_xlat1.x<0.0;
            u_xlat31 = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb31 = u_xlat31<0.0;
            u_xlat5.x = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
            u_xlatb5 = u_xlat5.x<0.0;
            u_xlati8.x = int((uint(u_xlatb31) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.y = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb5) * 0xffffffffu));
            u_xlati8.z = int((uint(u_xlatb1.x) * 0xffffffffu) & (uint(u_xlatb31) * 0xffffffffu));
            u_xlati7.xyz = int3(uint3(u_xlati7.xyz) | uint3(u_xlati8.xyz));
            u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
            u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
            u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
            u_xlati0.xyz = int3(uint3(u_xlati2.xyz) | uint3(u_xlati7.xyz));
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb27 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat2.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat2.xyz);
            u_xlat2.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat2.xyz);
            u_xlat2.xyz = u_xlat2.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat2.z);
            u_xlat2.w = (-u_xlat2.y);
            u_xlat2.xy = u_xlat1.xx * u_xlat2.xw;
            u_xlat2.xy = fma(u_xlat2.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat3.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat3.xyz);
            u_xlat3.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat3.xyz);
            u_xlat3.xyz = u_xlat3.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat3.z);
            u_xlat3.w = (-u_xlat3.y);
            u_xlat20.xy = u_xlat1.xx * u_xlat3.xw;
            u_xlat20.xy = fma(u_xlat20.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat3.xy = u_xlat20.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat21.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat20.xy = fma(u_xlat20.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat21.xy));
            u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat20.x = sqrt(u_xlat20.x);
            u_xlat7.x = u_xlat1.x * u_xlat20.x;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat20.xy = fma(u_xlat2.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat21.xy));
            u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat2.z = sqrt(u_xlat20.x);
            u_xlat2.xy = fma(u_xlat2.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat3.xy));
            u_xlat2.x = dot(u_xlat2.xy, u_xlat2.xy);
            u_xlat2.x = sqrt(u_xlat2.x);
            u_xlat7.yz = u_xlat1.xx * u_xlat2.zx;
            u_xlat7.yz = clamp(u_xlat7.yz, 0.0f, 1.0f);
            u_xlat2.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat2.xyz : u_xlat0.xyz;
            u_xlatb27 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat2.xyz = u_xlat5.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat6.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat1.z = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat28 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat28;
            u_xlat2.x = (-u_xlat1.x) + 1.0;
            u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat28;
            u_xlat2.y = (-u_xlat1.x) + 1.0;
            u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat28;
            u_xlat2.z = (-u_xlat1.x) + 1.0;
            u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat2.xyz * u_xlat2.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb27)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat4.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat27 = u_xlat0.y + u_xlat0.x;
            u_xlat27 = u_xlat0.z + u_xlat27;
            u_xlat27 = u_xlat27 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat27 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat27, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:589:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:595:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:596:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD4 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.w = u_xlat0.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat1.w = u_xlat0.y;
    output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlatb0 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    if(u_xlatb0){
        output.TEXCOORD8.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlatb0 = 0.0<UnityPerDraw.unity_MotionVectorsParams.x;
        u_xlat0.xyz = (bool(u_xlatb0)) ? input.TEXCOORD4.xyz : input.POSITION0.xyz;
        u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[3].xyz;
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].x;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].x;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].x;
        u_xlat2.w = u_xlat1.x;
        u_xlat0.w = 1.0;
        output.TEXCOORD8.x = dot(u_xlat2, u_xlat0);
        u_xlat2.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].y;
        u_xlat2.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].y;
        u_xlat2.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].y;
        u_xlat2.w = u_xlat1.y;
        output.TEXCOORD8.y = dot(u_xlat2, u_xlat0);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[0].z;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[1].z;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_MatrixPreviousM[2].z;
        output.TEXCOORD8.z = dot(u_xlat1, u_xlat0);
    }
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD8 [[ attribute(4) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD8 = input.cp[controlPointID].TEXCOORD8;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float3 TEXCOORD8 [[ user(TEXCOORD8) ]];
    float3 TEXCOORD9 [[ user(TEXCOORD9) ]];
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float3 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    bool u_xlatb9;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[1].xyw;
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[0].xyw, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[2].xyw, u_xlat0.zzz, u_xlat1.xyz);
    output.TEXCOORD8.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_NonJitteredViewProjMatrix[3].xyw;
    u_xlat1.xyz = mtl_TessCoord.yyy * input.cp[1].TEXCOORD8.xyz;
    u_xlat1.xyz = fma(input.cp[0].TEXCOORD8.xyz, mtl_TessCoord.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(input.cp[2].TEXCOORD8.xyz, mtl_TessCoord.zzz, u_xlat1.xyz);
    u_xlat2.xyz = u_xlat1.yyy * ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[1].xyw;
    u_xlat1.xyw = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[0].xyw, u_xlat1.xxx, u_xlat2.xyz);
    u_xlat1.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[2].xyw, u_xlat1.zzz, u_xlat1.xyw);
    u_xlat1.xyz = u_xlat1.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_PrevViewProjMatrix[3].xyw;
    u_xlatb9 = UnityPerDraw.unity_MotionVectorsParams.y==0.0;
    output.TEXCOORD9.xyz = (bool(u_xlatb9)) ? float3(0.0, 0.0, 1.0) : u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:561:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:568:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:569:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    bool u_xlatb0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
        if(u_xlatb0){
            u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xyz);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xyz);
            u_xlat4.xyz = u_xlat4.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xyz + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat4.xyz = u_xlat4.xyz + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat4.z);
            u_xlat4.w = (-u_xlat4.y);
            u_xlat4.xy = u_xlat0.xx * u_xlat4.xw;
            u_xlat4.xy = fma(u_xlat4.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xy = u_xlat4.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat20.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat8.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat8.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat8.xyz = sqrt(u_xlat8.xyz);
        u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.x = u_xlat8.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.x = (-u_xlat8.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.y = (-u_xlat8.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.z = (-u_xlat8.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat8.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat8.xyz = u_xlat8.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat8.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:561:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:568:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
                             ^
program_source:569:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat8;
    float u_xlat9;
    float u_xlat10;
    float u_xlat16;
    float u_xlat17;
    float u_xlat25;
    u_xlat0.xyz = input.POSITION0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.POSITION0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.POSITION0.zzz, u_xlat0.xyz);
    output.INTERNALTESSPOS0.xyz = u_xlat0.xyz + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zwwy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].wzyw;
    u_xlat1.x = u_xlat0.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat1.x = fma(u_xlat0.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat1.x));
    u_xlat1.x = fma((-u_xlat0.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat1.x = fma(u_xlat0.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat1.x);
    u_xlat2 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat1.x = fma(u_xlat2.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat1.x = fma((-u_xlat2.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat1.x);
    u_xlat9 = u_xlat1.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].zwwy;
    u_xlat17 = u_xlat3.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat17 = fma(u_xlat3.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat17));
    u_xlat17 = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat17 = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat17);
    u_xlat4 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].yzxw;
    u_xlat17 = fma((-u_xlat4.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat1.z = fma(u_xlat4.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat17);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x, u_xlat1.z, u_xlat9);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].wzyw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zwwy;
    u_xlat25 = u_xlat5.x * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y;
    u_xlat25 = fma(u_xlat5.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, (-u_xlat25));
    u_xlat25 = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat25 = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat25);
    u_xlat6 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zywx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].yzxw;
    u_xlat25 = fma((-u_xlat6.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat1.w = fma(u_xlat6.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat25);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x, u_xlat1.w, u_xlat9);
    u_xlat2.x = u_xlat5.y * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat2.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y, (-u_xlat2.x));
    u_xlat2.x = fma((-u_xlat5.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat5.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z, u_xlat2.x);
    u_xlat2.x = fma(u_xlat6.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat6.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].w, u_xlat2.x);
    u_xlat9 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].x, u_xlat2.x, u_xlat9);
    u_xlat9 = float(1.0) / u_xlat9;
    u_xlat2.xy = u_xlat3.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat2.xy = fma(u_xlat3.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat2.xy));
    u_xlat2.x = fma((-u_xlat4.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat10 = fma(u_xlat4.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat2.y);
    u_xlat10 = fma((-u_xlat4.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat10);
    u_xlat2.x = fma(u_xlat4.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat2.x);
    u_xlat3 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat2.x = fma(u_xlat3.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat2.x = fma((-u_xlat3.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat2.x);
    u_xlat4.x = u_xlat9 * u_xlat2.x;
    u_xlat8.xz = u_xlat0.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xy = fma(u_xlat0.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat8.xz));
    u_xlat0.x = fma(u_xlat2.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat8.x = fma((-u_xlat2.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.y);
    u_xlat8.x = fma(u_xlat2.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat2.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat7 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xzxy;
    u_xlat0.x = fma((-u_xlat7.x), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma(u_xlat7.y, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.y = u_xlat9 * u_xlat0.x;
    u_xlat0.xz = u_xlat5.yw * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx;
    u_xlat0.xz = fma(u_xlat5.xz, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xx, (-u_xlat0.xz));
    u_xlat0.x = fma((-u_xlat6.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat16 = fma(u_xlat6.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat0.z);
    u_xlat16 = fma((-u_xlat6.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].y, u_xlat16);
    u_xlat0.x = fma(u_xlat6.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].z, u_xlat0.x);
    u_xlat5 = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].zxyx * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xzxy;
    u_xlat0.x = fma(u_xlat5.x, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat0.x = fma((-u_xlat5.y), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat4.z = u_xlat9 * u_xlat0.x;
    u_xlat4.y = dot(input.NORMAL0.xyz, u_xlat4.xyz);
    u_xlat0.x = fma((-u_xlat3.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat10);
    u_xlat0.x = fma(u_xlat3.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.x = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma(u_xlat7.z, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat8.x);
    u_xlat0.x = fma((-u_xlat7.w), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.y = u_xlat9 * u_xlat0.x;
    u_xlat0.x = fma((-u_xlat5.z), UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat16);
    u_xlat0.x = fma(u_xlat5.w, UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].w, u_xlat0.x);
    u_xlat2.z = u_xlat9 * u_xlat0.x;
    u_xlat4.z = dot(input.NORMAL0.xyz, u_xlat2.xyz);
    u_xlat0.xyz = float3(u_xlat9) * u_xlat1.zxw;
    u_xlat4.x = dot(input.NORMAL0.xyz, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    output.NORMAL0.xyz = u_xlat0.xxx * u_xlat4.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    bool u_xlatb0;
    float3 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float4 u_xlat5;
    float4 u_xlat6;
    float3 u_xlat7;
    float3 u_xlat8;
    float2 u_xlat20;
    float2 u_xlat21;
    float u_xlat24;
    float u_xlat25;
    // fork_phase2
    {
        u_xlat0 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
        u_xlat1.x = u_xlat0.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat2 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
        u_xlat1.y = u_xlat2.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlat3 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
        u_xlat1.z = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
        if(u_xlatb0){
            u_xlat4.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.yyy);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xxx), u_xlat4.xyz);
            u_xlat4.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.zzz), u_xlat4.xyz);
            u_xlat4.xyz = u_xlat4.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat4.xyz + u_xlat5.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat0.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat4.xyz + u_xlat6.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat0.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat4.xyz = u_xlat4.xyz + u_xlat7.xyz;
            u_xlat0.x = float(1.0) / float(u_xlat4.z);
            u_xlat4.w = (-u_xlat4.y);
            u_xlat4.xy = u_xlat0.xx * u_xlat4.xw;
            u_xlat4.xy = fma(u_xlat4.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat4.xy = u_xlat4.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat0.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat20.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.x = u_xlat0.x * u_xlat25;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat4.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.y = u_xlat0.x * u_xlat25;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat4.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
            u_xlat25 = sqrt(u_xlat25);
            u_xlat7.z = u_xlat0.x * u_xlat25;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
        } else {
            u_xlat7.x = float(1.0);
            u_xlat7.y = float(1.0);
            u_xlat7.z = float(1.0);
        }
        u_xlatb0 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.xyz = u_xlat0.yzw * float3(0.5, 0.5, 0.5);
        u_xlat2.xyz = u_xlat2.yzw * float3(0.5, 0.5, 0.5);
        u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
        u_xlat8.x = dot(u_xlat8.xyz, u_xlat8.xyz);
        u_xlat8.y = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat8.z = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat8.xyz = sqrt(u_xlat8.xyz);
        u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
        u_xlat8.x = u_xlat8.x + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.x = (-u_xlat8.x) + 1.0;
        u_xlat2.x = clamp(u_xlat2.x, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.y + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.y = (-u_xlat8.x) + 1.0;
        u_xlat2.y = clamp(u_xlat2.y, 0.0f, 1.0f);
        u_xlat8.x = u_xlat8.z + (-UnityPerMaterial._TessellationFactorMinDistance);
        u_xlat8.x = u_xlat8.x / u_xlat25;
        u_xlat2.z = (-u_xlat8.x) + 1.0;
        u_xlat2.z = clamp(u_xlat2.z, 0.0f, 1.0f);
        u_xlat8.xyz = u_xlat2.xyz * u_xlat2.xyz;
        u_xlat8.xyz = u_xlat8.xyz * u_xlat7.xyz;
        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat8.xyz : u_xlat7.xyz;
        u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
        u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
        u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
        u_xlat24 = u_xlat0.y + u_xlat0.x;
        u_xlat24 = u_xlat0.z + u_xlat24;
        u_xlat24 = u_xlat24 * 0.333333343;
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct VGlobals_Type
{
    int _ObjectId;
    int _PassValue;
    float4 _SelectionID;
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(0) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(1) ]],
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(2) ]],
    constant VGlobals_Type& VGlobals [[ buffer(3) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(4) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(5) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * VGlobals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(VGlobals.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + VGlobals.hlslcc_mtx4x4unity_MatrixVP[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:602:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:608:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:609:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:566:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:572:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:573:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    bool u_xlatb4;
    bool u_xlatb8;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    u_xlat0.x = dot(u_xlat0, u_xlat2);
    u_xlatb4 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb8 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb4 = u_xlatb8 && u_xlatb4;
    output.INTERNALTESSPOS0.x = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat3.w = u_xlat1.y;
    u_xlat3.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat3.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat3.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    u_xlat0.x = dot(u_xlat3, u_xlat2);
    output.INTERNALTESSPOS0.y = (u_xlatb4) ? 0.0 : u_xlat0.x;
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    u_xlat0.x = dot(u_xlat1, u_xlat2);
    output.INTERNALTESSPOS0.z = (u_xlatb4) ? 0.0 : u_xlat0.x;
    output.INTERNALTESSPOS0.w = (u_xlatb4) ? 0.0 : UnityPerMaterial._TessellationFactor;
    u_xlat1.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);
    u_xlat0.x = rsqrt(u_xlat0.x);
    u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz;
    output.NORMAL0.xyz = (bool(u_xlatb4)) ? float3(0.0, 0.0, 0.0) : u_xlat0.xzw;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:589:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:595:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:596:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TANGENT0.w = input.TANGENT0.w;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.zw = input.TEXCOORD1.xy;
    output.TEXCOORD2 = input.COLOR0;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:602:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:608:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:609:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
program_source:602:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:608:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:609:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    bool u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    bool u_xlatb3;
    float u_xlat9;
    u_xlatb0 = int(ShaderVariablesGlobal._EnableRecursiveRayTracing)!=0x0;
    u_xlatb3 = 0.0<UnityPerMaterial._RayTracing;
    u_xlatb0 = u_xlatb3 && u_xlatb0;
    if(u_xlatb0){
        output.INTERNALTESSPOS0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TANGENT0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD0 = float4(0.0, 0.0, 0.0, 0.0);
        output.TEXCOORD2 = float4(0.0, 0.0, 0.0, 0.0);
        output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    } else {
        u_xlat0.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
        u_xlat1.w = u_xlat0.x;
        u_xlat2.xyz = input.POSITION0.xyz;
        u_xlat2.w = 1.0;
        output.INTERNALTESSPOS0.x = dot(u_xlat1, u_xlat2);
        u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
        u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
        u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
        u_xlat1.w = u_xlat0.y;
        output.INTERNALTESSPOS0.y = dot(u_xlat1, u_xlat2);
        u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
        u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
        u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
        output.INTERNALTESSPOS0.z = dot(u_xlat0, u_xlat2);
        u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
        u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
        u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
        u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat9 = max(u_xlat9, 1.17549435e-38);
        u_xlat9 = rsqrt(u_xlat9);
        output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
        output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
        output.TANGENT0.w = input.TANGENT0.w;
        output.TEXCOORD0.xy = input.TEXCOORD0.xy;
        output.TEXCOORD0.zw = input.TEXCOORD1.xy;
        output.TEXCOORD2 = input.COLOR0;
    }
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TANGENT0 = input.cp[controlPointID].TANGENT0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
        output.TEXCOORD2 = input.cp[controlPointID].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:557:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:563:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:564:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(2) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:549:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:555:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:556:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    output.NORMAL0.xyz = float3(0.0, 0.0, 0.0);
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(1) ]] ;
    float3 NORMAL0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        output.INTERNALTESSPOS0 = input.cp[controlPointID].INTERNALTESSPOS0;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // fork_phase2
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat0 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.mtl_Position = u_xlat0 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    return output;
}
// SHADER_STAGE_DOMAIN_end
Compilation succeeded with: 

program_source:591:53: warning: writable resources in non-void post-tessellation vertex function
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
                                                    ^
program_source:597:30: note: writable buffer defined here
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
                             ^
program_source:598:48: note: writable buffer defined here
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
                                               ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct ShaderVariablesGlobal_Type
{
    float4 hlslcc_mtx4x4_ViewMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewMatrix[4];
    float4 hlslcc_mtx4x4_InvViewMatrix[4];
    float4 hlslcc_mtx4x4_ProjMatrix[4];
    float4 hlslcc_mtx4x4_InvProjMatrix[4];
    float4 hlslcc_mtx4x4_ViewProjMatrix[4];
    float4 hlslcc_mtx4x4_CameraViewProjMatrix[4];
    float4 hlslcc_mtx4x4_InvViewProjMatrix[4];
    float4 hlslcc_mtx4x4_NonJitteredViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevViewProjMatrix[4];
    float4 hlslcc_mtx4x4_PrevInvViewProjMatrix[4];
    float4 _WorldSpaceCameraPos_Internal;
    float4 _PrevCamPosRWS_Internal;
    float4 _ScreenSize;
    float4 _PostProcessScreenSize;
    float4 _RTHandleScale;
    float4 _RTHandleScaleHistory;
    float4 _RTHandlePostProcessScale;
    float4 _RTHandlePostProcessScaleHistory;
    float4 _ZBufferParams;
    float4 _ProjectionParams;
    float4 unity_OrthoParams;
    float4 _ScreenParams;
    float4 _FrustumPlanes[6];
    float4 _ShadowFrustumPlanes[6];
    float4 _TaaFrameInfo;
    float4 _TaaJitterStrength;
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float4 _TimeParameters;
    float4 _LastTimeParameters;
    int _FogEnabled;
    int _PBRFogEnabled;
    int _EnableVolumetricFog;
    float _MaxFogDistance;
    float4 _FogColor;
    float _FogColorMode;
    float _GlobalMipBias;
    float _GlobalMipBiasPow2;
    float _Pad0;
    float4 _MipFogParameters;
    float4 _HeightFogBaseScattering;
    float _HeightFogBaseExtinction;
    float _HeightFogBaseHeight;
    float _GlobalFogAnisotropy;
    int _VolumetricFilteringEnabled;
    float2 _HeightFogExponents;
    int _FogDirectionalOnly;
    float _Pad1;
    float4 _VBufferViewportSize;
    float4 _VBufferLightingViewportScale;
    float4 _VBufferLightingViewportLimit;
    float4 _VBufferDistanceEncodingParams;
    float4 _VBufferDistanceDecodingParams;
    uint _VBufferSliceCount;
    float _VBufferRcpSliceCount;
    float _VBufferRcpInstancedViewCount;
    float _VBufferLastSliceDist;
    float4 _ShadowAtlasSize;
    float4 _CascadeShadowAtlasSize;
    float4 _AreaShadowAtlasSize;
    float4 _CachedShadowAtlasSize;
    float4 _CachedAreaShadowAtlasSize;
    float4 hlslcc_mtx4x4_Env2DCaptureVP[128];
    float4 _Env2DCaptureForward[32];
    float4 _Env2DAtlasScaleOffset[32];
    uint _DirectionalLightCount;
    uint _PunctualLightCount;
    uint _AreaLightCount;
    uint _EnvLightCount;
    int _EnvLightSkyEnabled;
    uint _CascadeShadowCount;
    int _DirectionalShadowIndex;
    uint _EnableLightLayers;
    uint _EnableSkyReflection;
    uint _EnableSSRefraction;
    float _SSRefractionInvScreenWeightDistance;
    float _ColorPyramidLodCount;
    float _DirectionalTransmissionMultiplier;
    float _ProbeExposureScale;
    float _ContactShadowOpacity;
    float _ReplaceDiffuseForIndirect;
    float4 _AmbientOcclusionParam;
    float _IndirectDiffuseLightingMultiplier;
    uint _IndirectDiffuseLightingLayers;
    float _ReflectionLightingMultiplier;
    uint _ReflectionLightingLayers;
    float _MicroShadowOpacity;
    uint _EnableProbeVolumes;
    uint _ProbeVolumeCount;
    float _SlopeScaleDepthBias;
    float4 _CookieAtlasSize;
    float4 _CookieAtlasData;
    float4 _PlanarAtlasData;
    uint _NumTileFtplX;
    uint _NumTileFtplY;
    float g_fClustScale;
    float g_fClustBase;
    float g_fNearPlane;
    float g_fFarPlane;
    int g_iLog2NumClusters;
    uint g_isLogBaseBufferEnabled;
    uint _NumTileClusteredX;
    uint _NumTileClusteredY;
    int _EnvSliceSize;
    uint _EnableDecalLayers;
    float4 _ShapeParamsAndMaxScatterDists[16];
    float4 _TransmissionTintsAndFresnel0[16];
    float4 _WorldScalesAndFilterRadiiAndThicknessRemaps[16];
    uint4 _DiffusionProfileHashTable[16];
    uint _EnableSubsurfaceScattering;
    uint _TexturingModeFlags;
    uint _TransmissionFlags;
    uint _DiffusionProfileCount;
    float2 _DecalAtlasResolution;
    uint _EnableDecals;
    uint _DecalCount;
    float _OffScreenDownsampleFactor;
    uint _OffScreenRendering;
    uint _XRViewCount;
    int _FrameCount;
    float4 _CoarseStencilBufferSize;
    int _IndirectDiffuseMode;
    int _EnableRayTracedReflections;
    int _RaytracingFrameIndex;
    uint _EnableRecursiveRayTracing;
    int _TransparentCameraOnlyMotionVectors;
    float _GlobalTessellationFactorMultiplier;
    float _SpecularOcclusionBlend;
    float _DeExposureMultiplier;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
    float4 unity_LightmapST;
    float4 unity_DynamicLightmapST;
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_ProbeVolumeParams;
    float4 hlslcc_mtx4x4unity_ProbeVolumeWorldToObject[4];
    float4 unity_ProbeVolumeSizeInv;
    float4 unity_ProbeVolumeMin;
    float4 unity_ProbesOcclusion;
    float4 hlslcc_mtx4x4unity_MatrixPreviousM[4];
    float4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];
    float4 unity_MotionVectorsParams;
};
struct UnityPerMaterial_Type
{
    float _AlphaCutoff;
    float _UseShadowThreshold;
    float _AlphaCutoffShadow;
    float _AlphaCutoffPrepass;
    float _AlphaCutoffPostpass;
    float4 _DoubleSidedConstants;
    float _BlendMode;
    float _EnableBlendModePreserveSpecularLighting;
    float _PPDMaxSamples;
    float _PPDMinSamples;
    float _PPDLodThreshold;
    float3 _EmissiveColor;
    float _AlbedoAffectEmissive;
    float _EmissiveExposureWeight;
    int _SpecularOcclusionMode;
    float3 _TransmittanceColor;
    float _Ior;
    float _ATDistance;
    float3 _EmissionColor;
    float4 _EmissiveColorMap_ST;
    float _TexWorldScaleEmissive;
    float4 _UVMappingMaskEmissive;
    float4 _InvPrimScale;
    float _EnableGeometricSpecularAA;
    float _SpecularAAScreenSpaceVariance;
    float _SpecularAAThreshold;
    float _RayTracing;
    float4 _BaseColor;
    float4 _BaseColorMap_ST;
    float4 _BaseColorMap_TexelSize;
    float4 _BaseColorMap_MipInfo;
    float _Metallic;
    float _MetallicRemapMin;
    float _MetallicRemapMax;
    float _Smoothness;
    float _SmoothnessRemapMin;
    float _SmoothnessRemapMax;
    float _AORemapMin;
    float _AORemapMax;
    float _NormalScale;
    float4 _DetailMap_ST;
    float _DetailAlbedoScale;
    float _DetailNormalScale;
    float _DetailSmoothnessScale;
    float4 _HeightMap_TexelSize;
    float _HeightAmplitude;
    float _HeightCenter;
    float _Anisotropy;
    float _DiffusionProfileHash;
    float _SubsurfaceMask;
    float _Thickness;
    float4 _ThicknessRemap;
    float _IridescenceThickness;
    float4 _IridescenceThicknessRemap;
    float _IridescenceMask;
    float _CoatMask;
    float4 _SpecularColor;
    float _EnergyConservingSpecularColor;
    float _TexWorldScale;
    float _InvTilingScale;
    float4 _UVMappingMask;
    float4 _UVDetailsMappingMask;
    float _LinkDetailsWithBase;
    float _TessellationFactor;
    float _TessellationFactorMinDistance;
    float _TessellationFactorMaxDistance;
    float _TessellationFactorTriangleSize;
    float _TessellationShapeFactor;
    float _TessellationBackFaceCullEpsilon;
    float _TessellationObjectScale;
    float _TessellationTilingScale;
};
struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float2 TEXCOORD0 [[ attribute(3) ]] ;
    float2 TEXCOORD1 [[ attribute(4) ]] ;
    float4 COLOR0 [[ attribute(5) ]] ;
};
struct Mtl_VertexOut
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
static Mtl_VertexOut vertexFunction(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float u_xlat9;
    output.INTERNALTESSPOS0.w = UnityPerMaterial._TessellationFactor;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].x;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].x;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].x;
    u_xlat1.xyw = (-ShaderVariablesGlobal._WorldSpaceCameraPos_Internal.xyz) + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.w = u_xlat1.x;
    u_xlat2.xyz = input.POSITION0.xyz;
    u_xlat2.w = 1.0;
    output.INTERNALTESSPOS0.x = dot(u_xlat0, u_xlat2);
    u_xlat0.w = u_xlat1.y;
    u_xlat0.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].y;
    u_xlat0.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].y;
    u_xlat0.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].y;
    output.INTERNALTESSPOS0.y = dot(u_xlat0, u_xlat2);
    u_xlat1.x = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].z;
    u_xlat1.y = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].z;
    u_xlat1.z = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].z;
    output.INTERNALTESSPOS0.z = dot(u_xlat1, u_xlat2);
    u_xlat0.x = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(input.NORMAL0.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.NORMAL0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    u_xlat0.xyz = input.TANGENT0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.TANGENT0.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.TANGENT0.zzz, u_xlat0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = max(u_xlat9, 1.17549435e-38);
    u_xlat9 = rsqrt(u_xlat9);
    output.TANGENT0.xyz = float3(u_xlat9) * u_xlat0.xyz;
    output.TANGENT0.w = input.TANGENT0.w;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    output.TEXCOORD0.zw = input.TEXCOORD1.xy;
    output.TEXCOORD2 = input.COLOR0;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 INTERNALTESSPOS0 [[ user(INTERNALTESSPOS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float4 TANGENT0 [[ user(TANGENT0) ]];
    float4 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
};
struct Mtl_ControlPointIn
{
    float4 INTERNALTESSPOS0 [[ attribute(6) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float4 TANGENT0 [[ attribute(2) ]] ;
    float4 TEXCOORD0 [[ attribute(3) ]] ;
    float4 TEXCOORD2 [[ attribute(7) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    float4 u_xlat0;
    int4 u_xlati0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    int4 u_xlati1;
    bool3 u_xlatb1;
    float4 u_xlat2;
    int4 u_xlati2;
    float4 u_xlat3;
    float4 u_xlat4;
    int4 u_xlati4;
    bool3 u_xlatb4;
    float4 u_xlat5;
    int4 u_xlati5;
    float4 u_xlat6;
    float4 u_xlat7;
    float3 u_xlat9;
    bool u_xlatb9;
    float2 u_xlat21;
    float2 u_xlat22;
    float u_xlat24;
    int u_xlati24;
    bool u_xlatb24;
    float u_xlat25;
    float u_xlat26;
    // control_point_phase2
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(ShaderVariablesGlobal, UnityPerDraw, UnityPerMaterial, vertexInput);
        u_xlati0.x = controlPointID;
        output.INTERNALTESSPOS0 = input.cp[u_xlati0.x].INTERNALTESSPOS0;
        output.NORMAL0.xyz = input.cp[u_xlati0.x].NORMAL0.xyz;
        output.TANGENT0 = input.cp[u_xlati0.x].TANGENT0;
        output.TEXCOORD0 = input.cp[u_xlati0.x].TEXCOORD0;
        output.TEXCOORD2 = input.cp[u_xlati0.x].TEXCOORD2;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    // fork_phase3
    {
        u_xlat0.xyz = input.cp[0].INTERNALTESSPOS0.xyz;
        u_xlat0.w = 1.0;
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat2.xyz = input.cp[1].INTERNALTESSPOS0.xyz;
        u_xlat2.w = 1.0;
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlat3.xyz = input.cp[2].INTERNALTESSPOS0.xyz;
        u_xlat3.w = 1.0;
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[0]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati4.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati4.w = u_xlatb1.z ? u_xlati4.z : int(0);
        u_xlat1.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlat1.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[1]);
        u_xlatb1.xyz = (u_xlat1.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb1.zzy) * 0xffffffffu) & (uint3(u_xlatb1.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb1.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati4) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[2]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat4.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlat4.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[3]);
        u_xlatb4.xyz = (u_xlat4.xyz<float3(0.0, 0.0, 0.0));
        u_xlati5.xyz = int3((uint3(u_xlatb4.zzy) * 0xffffffffu) & (uint3(u_xlatb4.yxx) * 0xffffffffu));
        u_xlati5.w = u_xlatb4.z ? u_xlati5.z : int(0);
        u_xlati1 = int4(uint4(u_xlati1) | uint4(u_xlati5));
        u_xlat0.x = dot(u_xlat0, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.y = dot(u_xlat2, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlat0.z = dot(u_xlat3, ShaderVariablesGlobal._FrustumPlanes[4]);
        u_xlatb0.xyz = (u_xlat0.xyz<float3(0.0, 0.0, 0.0));
        u_xlati2.xyz = int3((uint3(u_xlatb0.zzy) * 0xffffffffu) & (uint3(u_xlatb0.yxx) * 0xffffffffu));
        u_xlati2.w = u_xlatb0.z ? u_xlati2.z : int(0);
        u_xlati0 = int4(uint4(u_xlati1) | uint4(u_xlati2));
        u_xlatb1.x = -1.0<UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = ShaderVariablesGlobal.hlslcc_mtx4x4_ProjMatrix[3].w==0.0;
        u_xlat2.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_InvViewMatrix[3].xyz + (-input.cp[0].INTERNALTESSPOS0.xyz);
        u_xlat3.x = (u_xlatb9) ? u_xlat2.x : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[0].z;
        u_xlat3.y = (u_xlatb9) ? u_xlat2.y : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[1].z;
        u_xlat3.z = (u_xlatb9) ? u_xlat2.z : ShaderVariablesGlobal.hlslcc_mtx4x4_ViewMatrix[2].z;
        u_xlat9.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat9.x = rsqrt(u_xlat9.x);
        u_xlat9.xyz = u_xlat9.xxx * u_xlat3.xyz;
        u_xlat2.xyz = (-input.cp[0].INTERNALTESSPOS0.zxy) + input.cp[1].INTERNALTESSPOS0.zxy;
        u_xlat3.xyz = (-input.cp[0].INTERNALTESSPOS0.yzx) + input.cp[2].INTERNALTESSPOS0.yzx;
        u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
        u_xlat2.xyz = fma(u_xlat2.zxy, u_xlat3.yzx, (-u_xlat4.xyz));
        u_xlat26 = dot(u_xlat2.xyz, u_xlat9.xyz);
        u_xlat26 = u_xlat26 * UnityPerDraw.unity_WorldTransformParams.w;
        u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
        u_xlat9.x = u_xlat9.x * u_xlat2.x;
        u_xlat9.x = sqrt(u_xlat9.x);
        u_xlat9.x = u_xlat9.x * UnityPerMaterial._TessellationBackFaceCullEpsilon;
        u_xlatb9 = u_xlat26<u_xlat9.x;
        u_xlatb1.x = u_xlatb9 && u_xlatb1.x;
        u_xlati24 = int(uint(u_xlati0.w) | (uint(u_xlatb1.x) * 0xffffffffu));
        if((uint(u_xlati24))==uint(0)){
            u_xlat1 = input.cp[2].INTERNALTESSPOS0.wxyz + input.cp[1].INTERNALTESSPOS0.wxyz;
            u_xlat2.x = u_xlat1.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat3 = input.cp[0].INTERNALTESSPOS0.wxyz + input.cp[2].INTERNALTESSPOS0.wxyz;
            u_xlat2.y = u_xlat3.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlat4 = input.cp[1].INTERNALTESSPOS0.wxyz + input.cp[0].INTERNALTESSPOS0.wxyz;
            u_xlat2.z = u_xlat4.x * ShaderVariablesGlobal._GlobalTessellationFactorMultiplier;
            u_xlati0.x = (u_xlati0.x != 0) ? int(0x0) : int(0x1);
            u_xlati0.y = (u_xlati0.y != 0) ? int(0x0) : int(0x1);
            u_xlati0.z = (u_xlati0.z != 0) ? int(0x0) : int(0x1);
            u_xlat0.xyz = float3(u_xlati0.xyz);
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat5.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[0].INTERNALTESSPOS0.yyy;
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[0].INTERNALTESSPOS0.xxx, u_xlat5.xyz);
            u_xlat5.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[0].INTERNALTESSPOS0.zzz, u_xlat5.xyz);
            u_xlat5.xyz = u_xlat5.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat5.z);
            u_xlat5.w = (-u_xlat5.y);
            u_xlat5.xy = u_xlat1.xx * u_xlat5.xw;
            u_xlat5.xy = fma(u_xlat5.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[1].INTERNALTESSPOS0.yyy;
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[1].INTERNALTESSPOS0.xxx, u_xlat6.xyz);
            u_xlat6.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[1].INTERNALTESSPOS0.zzz, u_xlat6.xyz);
            u_xlat6.xyz = u_xlat6.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat6.z);
            u_xlat6.w = (-u_xlat6.y);
            u_xlat21.xy = u_xlat1.xx * u_xlat6.xw;
            u_xlat21.xy = fma(u_xlat21.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat6.xy = u_xlat21.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat7.xyz = ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[1].xyw * input.cp[2].INTERNALTESSPOS0.yyy;
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[0].xyw, input.cp[2].INTERNALTESSPOS0.xxx, u_xlat7.xyz);
            u_xlat7.xyz = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[2].xyw, input.cp[2].INTERNALTESSPOS0.zzz, u_xlat7.xyz);
            u_xlat7.xyz = u_xlat7.xyz + ShaderVariablesGlobal.hlslcc_mtx4x4_CameraViewProjMatrix[3].xyw;
            u_xlat1.x = float(1.0) / float(u_xlat7.z);
            u_xlat7.w = (-u_xlat7.y);
            u_xlat22.xy = u_xlat1.xx * u_xlat7.xw;
            u_xlat22.xy = fma(u_xlat22.xy, float2(0.5, 0.5), float2(0.5, 0.5));
            u_xlat22.xy = u_xlat22.xy * ShaderVariablesGlobal._ScreenSize.xy;
            u_xlat1.x = float(1.0) / UnityPerMaterial._TessellationFactorTriangleSize;
            u_xlat21.xy = fma(u_xlat21.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.x = u_xlat1.x * u_xlat26;
            u_xlat7.x = clamp(u_xlat7.x, 0.0f, 1.0f);
            u_xlat21.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat22.xy));
            u_xlat26 = dot(u_xlat21.xy, u_xlat21.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.y = u_xlat1.x * u_xlat26;
            u_xlat7.y = clamp(u_xlat7.y, 0.0f, 1.0f);
            u_xlat5.xy = fma(u_xlat5.xy, ShaderVariablesGlobal._ScreenSize.xy, (-u_xlat6.xy));
            u_xlat26 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat26 = sqrt(u_xlat26);
            u_xlat7.z = u_xlat1.x * u_xlat26;
            u_xlat7.z = clamp(u_xlat7.z, 0.0f, 1.0f);
            u_xlat5.xyz = u_xlat0.xyz * u_xlat7.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat5.xyz : u_xlat0.xyz;
            u_xlatb24 = 0.0<UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.xyz = u_xlat1.yzw * float3(0.5, 0.5, 0.5);
            u_xlat3.xyz = u_xlat3.yzw * float3(0.5, 0.5, 0.5);
            u_xlat4.xyz = u_xlat4.yzw * float3(0.5, 0.5, 0.5);
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);
            u_xlat1.y = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat1.z = dot(u_xlat4.xyz, u_xlat4.xyz);
            u_xlat1.xyz = sqrt(u_xlat1.xyz);
            u_xlat25 = (-UnityPerMaterial._TessellationFactorMinDistance) + UnityPerMaterial._TessellationFactorMaxDistance;
            u_xlat1.x = u_xlat1.x + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.x = (-u_xlat1.x) + 1.0;
            u_xlat3.x = clamp(u_xlat3.x, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.y + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.y = (-u_xlat1.x) + 1.0;
            u_xlat3.y = clamp(u_xlat3.y, 0.0f, 1.0f);
            u_xlat1.x = u_xlat1.z + (-UnityPerMaterial._TessellationFactorMinDistance);
            u_xlat1.x = u_xlat1.x / u_xlat25;
            u_xlat3.z = (-u_xlat1.x) + 1.0;
            u_xlat3.z = clamp(u_xlat3.z, 0.0f, 1.0f);
            u_xlat1.xyz = u_xlat3.xyz * u_xlat3.xyz;
            u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
            u_xlat0.xyz = (bool(u_xlatb24)) ? u_xlat1.xyz : u_xlat0.xyz;
            u_xlat0.xyz = u_xlat0.xyz * u_xlat2.xyz;
            u_xlat0.xyz = u_xlat0.xyz * float3(0.5, 0.5, 0.5);
            u_xlat0.xyz = max(u_xlat0.xyz, float3(1.0, 1.0, 1.0));
            u_xlat24 = u_xlat0.y + u_xlat0.x;
            u_xlat24 = u_xlat0.z + u_xlat24;
            u_xlat24 = u_xlat24 * 0.333333343;
        } else {
            u_xlat0.x = float(0.0);
            u_xlat0.y = float(0.0);
            u_xlat0.z = float(0.0);
            u_xlat24 = float(0.0);
        }
        tessFactor.edgeTessellationFactor[0] = min(u_xlat0.x, 64.0);
        tessFactor.edgeTessellationFactor[1] = min(u_xlat0.y, 64.0);
        tessFactor.edgeTessellationFactor[2] = min(u_xlat0.z, 64.0);
        tessFactor.insideTessellationFactor = min(u_xlat24, 64.0);
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
    float3 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 TEXCOORD2 [[ user(TEXCOORD2) ]];
    float4 TEXCOORD3 [[ user(TEXCOORD3) ]];
    float4 TEXCOORD5 [[ user(TEXCOORD5) ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant ShaderVariablesGlobal_Type& ShaderVariablesGlobal [[ buffer(0) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(1) ]],
    constant UnityPerMaterial_Type& UnityPerMaterial [[ buffer(2) ]],
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].INTERNALTESSPOS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].INTERNALTESSPOS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].INTERNALTESSPOS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1 = u_xlat0.yyyy * ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[1];
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[2], u_xlat0.zzzz, u_xlat1);
    output.TEXCOORD0.xyz = u_xlat0.xyz;
    output.mtl_Position = u_xlat1 + ShaderVariablesGlobal.hlslcc_mtx4x4_ViewProjMatrix[3];
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat0.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    output.TEXCOORD1.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TANGENT0;
    u_xlat0 = fma(input.cp[0].TANGENT0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD2 = fma(input.cp[2].TANGENT0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD0;
    u_xlat0 = fma(input.cp[0].TEXCOORD0, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD3 = fma(input.cp[2].TEXCOORD0, mtl_TessCoord.zzzz, u_xlat0);
    u_xlat0 = mtl_TessCoord.yyyy * input.cp[1].TEXCOORD2;
    u_xlat0 = fma(input.cp[0].TEXCOORD2, mtl_TessCoord.xxxx, u_xlat0);
    output.TEXCOORD5 = fma(input.cp[2].TEXCOORD2, mtl_TessCoord.zzzz, u_xlat0);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Refreshing native plugins compatible for Editor in 1.92 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 5664 Unused Serialized files (Serialized files now loaded: 0)
Unloading 48 unused Assets / (1.6 MB). Loaded Objects now: 6416.
Memory consumption went from 393.9 MB to 392.3 MB.
Total: 10.323785 ms (FindLiveObjects: 1.080527 ms CreateObjectMapping: 0.811015 ms MarkObjects: 6.761962 ms  DeleteObjects: 1.666987 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:framework-osx-AVFoundation: b23960f63f64bdc6ff669e2cdcee2391 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
