// mean filter code (DrawTrails) courtesy of https://github.com/DenizBicer/Physarum
// (Modified)

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SetTexture
#pragma kernel DrawPoints
#pragma kernel DrawTrails

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

// texture
shared RWTexture2D<float4> Result;
int _texres;
int _colres;

// buffer
StructuredBuffer<float3> pointsBuffer;
StructuredBuffer<float4> colorsBuffer;

// init texture as black
[numthreads(16,16,1)]
void SetTexture (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
}

// draw points from buffer
[numthreads(64,1,1)]
void DrawPoints (uint3 id : SV_DispatchThreadID)
{
    //if ((pointsBuffer[id.x].x * pointsBuffer[id.x].y) > 0) Result[pointsBuffer[id.x].xy] = colorsBuffer[pointsBuffer[id.x].z % _colres];
    if ((pointsBuffer[id.x].x * pointsBuffer[id.x].y) > 0) Result[pointsBuffer[id.x].xy] = colorsBuffer[pointsBuffer[id.x].z];
}

// draw trails from points
[numthreads(16,16,1)]
void DrawTrails (uint3 id : SV_DispatchThreadID)
{
    float3 value;

    value = Result[id.xy].rgb;

    float3 d = float3(1, -1, 0.0);

    //mean filter red
    value.r = value.r;
    value.r += Result[id.xy - d.xx].r; // -1,-1
    value.r += Result[id.xy - d.zx].r; // 0, -1
    value.r += Result[id.xy - d.yx].r; // +1, -1
    value.r += Result[id.xy - d.xz].r; // -1, 0
    value.r += Result[id.xy + d.xz].r; // +1, 0
    value.r += Result[id.xy + d.yx].r; // -1, +1
    value.r += Result[id.xy + d.zx].r; // 0, +1
    value.r += Result[id.xy + d.xx].r; // +1, +1

    value.r = (value.r / 9);
    
    //mean filter green
    value.g = value.g;
    value.g += Result[id.xy - d.xx].g; // -1,-1
    value.g += Result[id.xy - d.zx].g; // 0, -1
    value.g += Result[id.xy - d.yx].g; // +1, -1
    value.g += Result[id.xy - d.xz].g; // -1, 0
    value.g += Result[id.xy + d.xz].g; // +1, 0
    value.g += Result[id.xy + d.yx].g; // -1, +1
    value.g += Result[id.xy + d.zx].g; // 0, +1
    value.g += Result[id.xy + d.xx].g; // +1, +1

    value.g = (value.g / 9);

    //mean filter blue
    value.b = value.b;
    value.b += Result[id.xy - d.xx].b; // -1,-1
    value.b += Result[id.xy - d.zx].b; // 0, -1
    value.b += Result[id.xy - d.yx].b; // +1, -1
    value.b += Result[id.xy - d.xz].b; // -1, 0
    value.b += Result[id.xy + d.xz].b; // +1, 0
    value.b += Result[id.xy + d.yx].b; // -1, +1
    value.b += Result[id.xy + d.zx].b; // 0, +1
    value.b += Result[id.xy + d.xx].b; // +1, +1
    
    value.b = (value.b / 9);

    /*
    //calculate (non accurate) brightness
    float brightEx = Result[id.xy].r + Result[id.xy].g + Result[id.xy].b;
    float brightVal = value.r + value.g + value.b;
    
    if (brightVal > brightEx) Result[id.xy] = float4(value.r, value.g, value.b, 0.0);
    */
    Result[id.xy] = float4(value.r, value.g, value.b, 0.0);
}